substitutions:
  name: esphome-web-8281ec
  friendly_name: Apple Fan Controller
  devicename: apple-fan
  esphome_platform: esp32
  esphome_board: esp32dev
  esphome_project_name: Apple.temperature_control
  esphome_project_version: apple-fan-v.1

esphome:
  name: $name
  friendly_name: Apple Fan Controller
  name_add_mac_suffix: false
  project:
    name: $esphome_project_name
    version: $esphome_project_version
  on_boot:
# Power up fan at boot
    priority: 800
    then:
    - if:
        condition:
          api.connected:
        then:
        - logger.log: API is connected! Now we can trigger what we want!
#        else:
#        - delay: 1s
#        - output.set_level:
#            id: apple_pwm_speed
#            level: 1.0     # 100% pwm speed until temp is taken

esp32:
  board: esp32dev
  framework:
    type: esp-idf

# Enable logging
logger:
  level: debug
  logs:
    sht3xd.component: info

# Enable Home Assistant API
api:
  reboot_timeout: 0s

# Allow Over-The-Air updates
ota:
- platform: esphome

wifi:
  domain: .home
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Set up a wifi access point
  ap:
    ssid: ${friendly_name}
    password: '12345678'

dashboard_import:
  package_import_url: github://mattlward/Apple-Fan-v1/esphome-web-8281ec.yaml@main
  import_full_config: true

web_server:
  include_internal: true

status_led:
  pin:
    number: GPIO2
    inverted: false

i2c:
- id: bus_a
  sda: GPIO21
  scl: GPIO22
  scan: true
  frequency: 100kHz
- id: bus_b
  sda: GPIO16
  scl: GPIO17
  scan: true
  frequency: 400kHz

display:
- platform: lcd_pcf8574
  id: mydisplay
  dimensions: 16x2
  i2c_id: bus_b
  address: 0x27
  lambda: |-
    //Print sensor temperature, spd % and RPM on line 0
    it.printf(0,0,"%.0fF", id(sht30t).state);
    it.printf(4,0,"%.0f%%", id(slider).state);
    it.printf(9,0,"%.0fRPM", id(fan_pulse).state);
    it.printf(0, 1, "%s", id(addr).state.c_str());
    if (id(apple_backlight).state) {
    // Binary sensor is on
    // Control backlight on mydisplay
    // Binary sensor is on in HA
    id(mydisplay).backlight();
    } else {
    // Binary sensor is off in HA
    id(mydisplay).no_backlight();
    }
#    //Print time on line 1
#    it.strftime(1,1,"%I:%M%p  %m/%d", id(my_time).now());
#    it.printf(1,0,,displayText = name);



output:
- platform: ledc
  id: apple_pwm_speed
  pin: GPIO27
  frequency: 25000Hz

number:
- platform: template
  name: Pwm Fan Slider
  id: slider
  internal: false
  min_value: 15
  max_value: 100
  step: 1
  optimistic: true
  unit_of_measurement: '%'
  set_action:
    then:
    - output.set_level:
        id: apple_pwm_speed
        level: !lambda "return x/100;"

text_sensor:
  # Expose WiFi information as sensors.
- platform: wifi_info
  ip_address:
    name: IP address
    id: addr
  ssid:
    name: SSID
    id: ssid
  mac_address:
    name: ESP Mac Wifi Address

  # Send Uptime in raw seconds                                                                                                                                                                                                           
- platform: template
  name: $friendly_name Uptime
  id: uptime_human
  icon: mdi:clock-start
sensor:
- platform: sht3xd
  temperature:
    name: Apple Internal Temperature
    id: sht30t
    internal: false
    accuracy_decimals: 1
    filters:
      - lambda: return x * (9.0/5.0) + 32.0;
    unit_of_measurement: °F
    on_value:
      then:
        - lambda: |-
            const int min_temp = 70;   // Minimum temperature threshold (°F)
            const int max_temp = 85;   // Maximum temperature threshold (°F)
            const int min_speed = 15;  // Minimum fan speed percentage (%)
            const int max_speed = 100; // Maximum fan speed percentage (%)

            // Create a call to update the fan speed
            auto call = id(slider).make_call();

            // Get the temperature value
            int temp = ceil(x);

            // Calculate the fan speed 
            int speed = ceil(min_speed + ((temp - min_temp) * (max_speed - min_speed) / (max_temp - min_temp)));

            // Ensure the calculated speed stays within the defined limits
            speed = clamp(speed, min_speed, max_speed); //  If you are using  framework: type: esp-idf
            // ▲▲▲ ▼▼▼ If you get an error when compiling, try inverting the comment on these lines.
            //speed = constrain(speed, min_speed, max_speed); // If you are using  framework: type: arduino

            call.set_value(speed);

            // Publish the new speed value
            call.perform();
#            int min_temp = 70; // Adjust here
#            int max_temp = 85; // Adjust here
#            int mim_speed = 15; // Adjust here
#            int max_speed = 100; // Adjust here
#            int temp = floor(x);
#            int speed = floor(mim_speed + ((temp - min_temp) * (max_speed - mim_speed) / (max_temp - min_temp))); 
#            if (temp <= (min_temp)) { // If the temperature is less than 70º F, set the speed to 15%
#              auto call = id(slider).make_call();
#              call.set_value(mim_speed);
#              call.perform();
#              } else if (temp < (max_temp)) { // If the temperature is less than 85º F, set the speed to XX%
#              auto call = id(slider).make_call();
#              call.set_value(speed);
#              call.perform();
#              } else { // If the temperature is higher than 85º C, set the speed to 100%
#              auto call = id(slider).make_call();
#              call.set_value(100);
#              call.perform();
#            }

  humidity:
    name: Apple Internal Humidity
    id: sht30h
    internal: false
    accuracy_decimals: 0
    filters:
    - sliding_window_moving_average:
        window_size: 15
        send_every: 15
  i2c_id: bus_a
  address: 0x44
  update_interval: 5s



# Fan Speed
- platform: pulse_counter
  pin:
    number: GPIO25
    mode:
      input: true
      pullup: true
  name: PWM Fan RPM
  id: fan_pulse
  unit_of_measurement: RPM
  internal: false
  accuracy_decimals: 1
  filters:
  - multiply: 0.5
  count_mode:
    rising_edge: INCREMENT
    falling_edge: DISABLE
  update_interval: 3s
   # Send WiFi signal strength & uptime to HA                                                                                                                                                                                             
- platform: wifi_signal
  name: $friendly_name WiFi Strength
  update_interval: 60s
- platform: uptime
  name: $friendly_name Uptime
  id: uptime_sensor
  update_interval: 60s
  on_raw_value:
    then:
    - text_sensor.template.publish:
        id: uptime_human
            # Custom C++ code to generate the result                                                                                                                                                                                     
        state: !lambda |-
          int seconds = round(id(uptime_sensor).raw_state);
          int days = seconds / (24 * 3600);                                                                                                                                                                                          
          seconds = seconds % (24 * 3600);                                                                                                                                                                                           
          int hours = seconds / 3600;                                                                                                                                                                                                
          seconds = seconds % 3600;                                                                                                                                                                                                  
          int minutes = seconds /  60;                                                                                                                                                                                               
          seconds = seconds % 60;                                                                                                                                                                                                    
          return (                                                                                                                                                                                                                   
            (days ? to_string(days) + "d " : "") +
            (hours ? to_string(hours) + "h " : "") +
            (minutes ? to_string(minutes) + "m " : "") +
            (to_string(seconds) + "s")
          ).c_str();

binary_sensor:
  - platform: homeassistant
    id: apple_backlight
    entity_id: input_boolean.esphome_apple_backlight
    internal: false

time:
  - platform: homeassistant
    id: my_time
#- platform: sntp
#  id: my_time
#  timezone: UTC
#  servers:
#  - 0.pool.ntp.org
#  - 1.pool.ntp.org
#  - 2.pool.ntp.org


switch:
- platform: restart
  name: Restart
